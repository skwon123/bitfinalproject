<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bit.web.play.play-mapper">

<!-- 로그인 -->
	<!-- 로그인 > 아이디찾기 -->
	<select id="idSearch" parameterType="String" resultType="String">
		SELECT ID FROM MEMBERS
		WHERE EMAIL = #{value}
	</select>

	<!-- 로그인 >	비밀번호 찾기 -->
	<select id="pwSearch" parameterType="HashMap" resultType="String">
		SELECT PASSWORD FROM MEMBERS
		WHERE members_id = #{userId}
		WHERE EMAIL = #{pw_find_email}
	</select>

	<!-- 로그인 > 비밀번호 비교-->
	<select id="loginPass" parameterType="String" resultType="String">
		SELECT PASSWORD FROM MEMBERS
		WHERE members_id = #{value}
	</select>
	
	<!-- 로그인 > 권한 확인 -->
	<select id="selectAuthority" parameterType="java.lang.String" resultType="java.lang.String">
		SELECT AUTHORITY FROM MEMBERAUTHORITY
		WHERE MEMBERS_ID = #{value}
	</select>
	
<!--  -->		

<!-- 회원가입 -->
	<!-- 회원가입 > 데이터 넣기-->
	<insert id="insertSeqNumber" parameterType="com.bit.web.play.vo.membersBean">
	INSERT INTO members(members_id, password, nickname, birth, email, tel, regdate, genre1, genre2) 
	VALUES(#{members_id}, #{password}, #{nickname}, #{birth}, 
			#{email}, #{tel}, SYSDATE, #{genre1},#{genre2})
	</insert>
		
	<!-- 회원가입 > 아이디 중복체크	 -->
	<select id="ajaxGetId" parameterType="String"
		resultType="String">
		SELECT * FROM MEMBERS
		WHERE members_id=#{value}
	</select>	
	<!-- 회원가입 > 닉네임 중복체크 -->
	<select id="ajaxGetNickname" parameterType="String"
		resultType="String">
		SELECT * FROM MEMBERS
		WHERE nickname=#{value}
	</select>		
<!--  -->	
	
	
	
	
<!-- 마이페이지 -->
	<!-- 마이페이지 > 프로필 수정 > 검색-->
	<select id="getViewProfile" resultType="com.bit.web.play.vo.membersBean" parameterType="String">
        select *
        from members
		where members_id = #{vaule}
	
	</select>
	<!-- 마이페이지 > 프로필 수정 > 수정 -->
	<update id="postViewProfile" parameterType="com.bit.web.play.vo.membersBean">
		UPDATE MEMBERS
		SET 
		nickname = #{nickname},
		tel = #{tel},
		email = #{email},

		genre1 = #{genre1},
		genre2 = #{genre2},
		aboutme = #{aboutme}
		<choose> 
	   		<when test="profile_img !=null">
	   		,profile_img=#{profile_img}
	   		</when>
	 	</choose>
 		where members_id= #{members_id}

	</update>
	
<!--  -->	

<!-- 검색 페이지 -->	
	<!-- 검색 페이지 > 검색 -->	
	<resultMap type="squadboard" id="selectBoardID">
    	<result property="gamegenre_no" column="gamegenre_no"/>
    	<result property="members_id" column="members_id"/>
    	<result property="hostname" column="hostname"/>
    	<result property="title" column="title"/>
    	<result property="contents" column="contents"/>
    	<result property="password" column="password"/>
    	<result property="playtime" column="playtime"/>
    	<result property="regdate" column="reg"/>
    </resultMap>

	<select id="selectBoardList" resultType="com.bit.web.play.vo.squadboardBean" resultMap="selectBoardID" parameterType="HashMap">
	select gamegenre_no, members_id, hostname, title, contents, playtime, regdate 
		from squadboard 
		<if test="query != null and data != null">
		    where ${query} LIKE '%'||#{data}||'%'
		</if> 
	</select>
<!--  -->

<!-- 메인페이지 -->	
		
	<!-- 메인페이지 > 모집중인 스쿼드 검색-->
	<select id="squadstate0Select" resultType="com.bit.web.play.vo.squadboardBean">
		SELECT SB.SQUADBOARD_NO, SB.MEMBERS_ID, SB.HOSTNAME, SB.TITLE, SB.USER_ACCEPTCNT, SB.USER_MAXCNT, SB.PLAYTIME, SB.REGDATE, SB.RESERVEDATE, SB.PRICE, SB.FILENAME,
		GG.NAME AS GAMEGENRE_NAME, GG.GAME_IMG AS GAMEGENRE_GAME_IMG, SS.STATENAME AS SQUADSTATE_STATENAME
		FROM SQUADBOARD SB, GAMEGENRE GG, SQUADSTATE SS
		WHERE SB.GAMEGENRE_NO = GG.GAMEGENRE_NO AND SS.SQUADSTATE_NO = SB.SQUADSTATE AND SS.SQUADSTATE_NO = 0 ORDER BY SB.SQUADBOARD_NO DESC
	</select>

	<!-- 메인페이지 > 인기 스쿼드 팔로워순 검색-->
	<select id="squadPopularSelect" resultType="com.bit.web.play.vo.squadboardBean">
		SELECT SB.MEMBERS_ID, SB.HOSTNAME, SB.TITLE, SB.USER_ACCEPTCNT, SB.USER_MAXCNT, SB.PLAYTIME, SB.REGDATE, SB.RESERVEDATE, SB.PRICE, SB.FILENAME,
		GG.NAME AS GAMEGENRE_NAME, GG.GAME_IMG AS GAMEGENRE_GAME_IMG, SS.STATENAME AS SQUADSTATE_STATENAME
		FROM SQUADBOARD SB, GAMEGENRE GG, SQUADSTATE SS, MEMBERS M
		WHERE SB.GAMEGENRE_NO = GG.GAMEGENRE_NO AND SS.SQUADSTATE_NO = SB.SQUADSTATE AND SS.SQUADSTATE_NO = 0 ORDER BY M.FOLLOW_CNT DESC
	</select>
	
	<!-- 메인페이지 > 인기게임 리스트 검색-->
	<select id="popularGameListSelect" resultType="com.bit.web.play.vo.gamegenreBean">
		SELECT GAMEGENRE_NO, NAME, GAME_IMG, SQUAD_CNT
		FROM GAMEGENRE
		ORDER BY SQUAD_CNT DESC
	</select>
<!--  -->	

<!-- 스쿼드게시판 생성 -->
	<!-- id로 닉네임 select -->
	<select id="getUserName" parameterType="java.lang.String" resultType="java.lang.String">
		SELECT NICKNAME FROM MEMBERS
		WHERE MEMBERS_ID = #{value}
	</select>

	<!-- 게임이미지 -->
	<select id="gameImgSrcSelect" parameterType="java.lang.Integer" resultType="java.lang.String">
		SELECT GAME_IMG FROM GAMEGENRE WHERE GAMEGENRE_NO = #{value}
	</select>	

	<!-- 일반생성 > 스쿼드게시판 기본키 생성 -->
	<select id="getSquadBoardSequence" resultType="Integer">
		SELECT SQUADBOARD_SEQ.NEXTVAL From Dual
	</select>

	
	<!-- 일반생성 > 스쿼드게시판 데이터 넣기 -->
	<insert id="insertSquadBoard" parameterType="com.bit.web.play.vo.squadboardBean">
		INSERT INTO SQUADBOARD
		(SQUADBOARD_NO, GAMEGENRE_NO, MEMBERS_ID, HOSTNAME, TITLE, CONTENTS, USER_ACCEPTCNT, USER_MAXCNT, RECRUITOPTION, PLAYTIME, REGDATE, RESERVEDATE, SQUADSTATE, PRICE, PAYEDSTATE, FILENAME, TAGS)
		VALUES(#{squadboard_no}, #{gamegenre_no}, #{members_id}, #{hostname}, #{title}, #{contents}, 
		#{user_acceptcnt}, #{user_maxcnt}, #{recruitoption}, #{playtime}, SYSDATE, #{reservedate}, 
		#{squadstate}, #{price}, #{payedstate}, #{filename}, #{tags})
	</insert>
	
<!--  -->
	
<!--  스쿼드게시판--> 
	
	<!--  스쿼드게시판 > 스쿼드 상세내용 검색-->
	<select id="selectSquadBoardInfo" parameterType="java.lang.Integer" resultType="com.bit.web.play.vo.squadboardBean">
		SELECT squadboard_no, gamegenre_no, members_id, hostname, title, contents, 
			user_acceptcnt, user_maxcnt, recruitoption, playtime,
			regdate, TO_CHAR(reservedate, 'YYYY/MM/DD') reservedate,
			squadstate, price, payedstate, filename, tags
		FROM squadboard
		WHERE squadboard_no=#{VALUE}
	</select>
		
	<!--  스쿼드게시판 > 호스트기준 스쿼드 정보 검색-->
	<select id="selectSquadBoardHost" parameterType="java.lang.String" resultType="com.bit.web.play.vo.squadboardBean">
		select gg.game_img as gamegenre_game_img, sb.squadboard_no as squadboard_no, sb.title as title, gg.name as gamegenre_name, sb.members_id as members_id , sb.reservedate as reservedate, ss.statename as squadstate_statename
		from gamegenre gg,  squadstate ss, squadboard sb 
		where sb.gamegenre_no = gg.gamegenre_no and sb.squadstate = ss.squadstate_no and sb.members_id = #{VALUE}
		order by sb.reservedate desc
	</select>
	
	<!--  스쿼드게시판 > 호스트기준 리뷰 검색-->
	<select id="selectHostReviewHost" parameterType="java.lang.String" resultType="com.bit.web.play.vo.hostreviewBean">
		select  m.profile_img as profile_img , hr.name as name, hr.regdate as regdate, hr.contents as contents, hr.score as score
		from members m, hostreview hr
		where m.members_id = hr.writer_id and hr.host_id = #{VALUE}
	</select>
	
	<!-- 스쿼드게시판 > 참가버튼 > 참가기록 넣기-->
	<insert id="insertSquadHistory" parameterType="com.bit.web.play.vo.squadhistoryBean">
		insert into 
		squadhistory(squadhistory_no, squadboard_no, members_id, regdate)
		values(#{squadhistory_no}, #{squadboard_no}, #{members_id}, SYSDATE)
	</insert>
	<!-- 스쿼드게시판 > 참가버튼 > 수락대기 넣기-->
	<insert id="insertAcceptWaitting" parameterType="com.bit.web.play.vo.acceptwaittingBean">
		insert into 
		acceptwaitting(acceptwaitting_no, squadboard_no, members_id, regdate)
		values(#{acceptwaitting_no}, #{squadboard_no}, #{members_id}, SYSDATE)
	</insert>
	<!-- 스쿼드게시판 > 참가버튼 > 참가기록 기본키 생성-->
	<select id="getSequence_SquadHistory" resultType="java.lang.Integer">
		select SquadHistory_seq.nextval from dual
	</select>
	<!-- 스쿼드게시판 > 참가버튼 > 수락대기 기본키 생성-->
	<select id="getSequence_AcceptWaitting" resultType="java.lang.Integer">
		select AcceptWaitting_seq.nextval from dual
	</select>
	<!-- 스쿼드게시판 > 참가버튼 > 참가자 수 증가 -->
	<update id="updateSB_acceptcnt_increase" parameterType="java.lang.Integer" >
		update squadboard
		set user_acceptcnt = user_acceptcnt + 1
		where squadboard_no=#{value}
	</update>
	<!-- 스쿼드게시판 > 참가버튼 > 참가자 수 감소 -->
	<update id="updateSB_acceptcnt_decrease" parameterType="java.lang.Integer" >
		update squadboard
		set user_acceptcnt = user_acceptcnt - 1
		where squadboard_no=#{value}
	</update>
  	
	<!-- 스쿼드게시판 > 참가나 신청 중인지 여부 확인(참가기록 테이블) -->
	<select id="selectIdSquadHistory" parameterType="HashMap" resultType="java.lang.String">
		select nvl(min('Y'), 'N') as attendCheck
		from dual
		where exists (select *
	    	from squadhistory
	   		where squadboard_no=#{squadboard_no} and members_id=#{members_id})
	</select>
	
	<!-- 스쿼드게시판 > 참가나 신청 중인지 여부 확인(신청여부 테이블) -->
	<select id="selectIdAcceptWaitting" parameterType="HashMap" resultType="java.lang.String">
		select nvl(min('Y'), 'N') as attendCheck
		from dual
		where exists (select *
	    	from acceptwaitting
	   		where squadboard_no=#{squadboard_no} and members_id=#{members_id})
	</select>
<!--  -->	

<!-- 공지사항 -->
	<!-- 공지사항 > 공지사항 기본키 생성-->
	<select id="getSequence2" resultType="Integer">
		select
		noticeboard_seq.nextval from dual
	</select>
	<!-- 공지사항 > 공지사항 데이터 넣기-->	
	<insert id="insertNoticeBoard"
		parameterType="com.bit.web.play.vo.NoticeBoardBean">
		INSERT INTO NOTICEBOARD(noticeboard_no, writer_id, title, content, regdate)
		VALUES(#{noticeboard_no},
		#{writer_id},
		#{title}, #{content}, SYSDATE)
	</insert>
	<!-- 공지사항 > 공지사항 검색-->
	<select id="selectNoticeBoard" resultType="com.bit.web.play.vo.NoticeBoardBean">
		SELECT NOTICEBOARD_NO, WRITER_ID, TITLE, CONTENT, REGDATE FROM
		NOTICEBOARD ORDER BY NOTICEBOARD_NO
	</select>
	
<!-- 게스트 후기 -->
	<!-- 게스트 후기 > 기본키 생성-->
	<select id="getGuestReviewSequence" resultType="Integer">
		select hostreview_seq.nextval from dual
	</select>
	
	<!-- 게스트 후기 > 후기 데이터 넣기 -->
	<insert id="insertGuestReview" 
		parameterType="com.bit.web.play.vo.GuestReviewBean">
		INSERT INTO HOSTREVIEW(hostreview_no, host_id, writer_id, name,
		contents, score, regdate, good_cnt, ref, pnum, lev, step)
		VALUES(#{hostreview_no}, #{host_id}, #{writer_id}, #{name}, #{contents},
		#{score}, SYSDATE, #{good_cnt}, #{ref}, #{pnum}, #{lev}, #{step})
	</insert>
	
	<!-- 게스트 후기 > 호스트리뷰 검색 (작성자 기준) -->
	<select id="selectGuestReview1" parameterType="String"
		resultType="com.bit.web.play.vo.GuestReviewBean">
		select hr.name as name, hr.regdate as regdate, hr.contents as contents, hr.score as score 
		from hostreview hr
		where hr.writer_id = #{VALUE}
	</select>	
<!--  -->
	
	
	
</mapper>