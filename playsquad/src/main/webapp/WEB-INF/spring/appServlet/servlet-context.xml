<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<!-- 어노테이션 방식의 mvc를 사용하겠다는 표시 -->
	<!-- RequestMapping, ModelAttribute, SessionAttribute, RequestParam -->
	<annotation-driven />

	<!--AOP 관련 어노테이션들을 자동으로 인식하고 용도에 맞게 처리해준다. -->
	<aop:aspectj-autoproxy/>

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving
		up static resources in the ${webappRoot}/resources directory -->
	<!-- js, css파일들은 서블릿 컨테이너를 태우지 않고 바로 매핑해주기위해서 사용 -->
	<resources mapping="/resources/**" location="/resources/" />
	<beans:bean id="ds" class="org.apache.commons.dbcp.BasicDataSource">
	    <beans:property name="driverClassName" value="oracle.jdbc.OracleDriver"/>
	    <beans:property name="url" value="jdbc:oracle:thin:@localhost:1521:orcl"/>
	    <beans:property name="username" value="togethersquad"></beans:property>
	    <beans:property name="password" value="1234"></beans:property>	  
	</beans:bean>

	<!--1 dataSource생성-->
     <beans:bean id="dataSource"  class="net.sf.log4jdbc.Log4jdbcProxyDataSource">
       <beans:constructor-arg ref="ds"/>
       <beans:property name="logFormatter">
        <beans:bean class="net.sf.log4jdbc.tools.Log4JdbcCustomFormatter">
           <beans:property name="loggingType" value="MULTI_LINE"/>
           <beans:property name="sqlPrefix" value="SQL: "/>
        </beans:bean>
       </beans:property>       
     </beans:bean>

	<!-- 2.커넥션을 만들어준다. 하지만 연결을맺고, 완료된후 연결을 close하는건 직접 개발자가 해야한다. -->
	<beans:bean id="ssf" class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource"></beans:property>
		<beans:property name="configLocation" value="/WEB-INF/Config.xml"></beans:property>



		<beans:property name="mapperLocations" value="classpath:/mappers/*Mapper.xml" />
	</beans:bean>


	<beans:bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<beans:constructor-arg index="0" ref="ssf" />
	</beans:bean>

	<beans:bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager" p:dataSource-ref="dataSource"></beans:bean>
	<!-- 어노테이션 방식으로 트랜젝션을 사용하겠다는 표시 @Transaction -->
	<tx:annotation-driven transaction-manager="transactionManager"/>



    <tx:advice id="txAdvice" transaction-manager="transactionManager">
	    <tx:attributes>
		  <tx:method name="get*" read-only="true" />
		  <tx:method name="select*" read-only="true" />
		  <tx:method name="find*" read-only="true" />
	      <tx:method name="*" propagation="REQUIRED"/>	     
	    </tx:attributes>	
	</tx:advice>
	<aop:config>
		<!--보통 서비스에 트랜젝션 걸어줍니다. 현재는 서비스가 없으나 서비스 인터페이스가 필요합니다.-->
		<!--pointcut="bean(*ServiceImpl)-->
	     <aop:advisor advice-ref="txAdvice" pointcut="execution(* com.bit.web.play.dao.*.*(..))"/>
	</aop:config>

	<beans:bean id="download" class="com.bit.web.play.vo.DownLoadView"/>
	
	<!-- 경로가 지정되지 않은 view정보를 설정할때 FileDownlaod Ajax -->
	<!--
	InternalResourceView가 1번, BeanNameViewResolver 2번이 좋을거 같습니다.
	경로가 지정되지 않은 빈은 빈도수가 적기 때문에 0순위로 두는건 리소스 낭비입니다.
	-->
	<beans:bean class="org.springframework.web.servlet.view.BeanNameViewResolver">
	    <beans:property name="order" value="1"></beans:property>
	</beans:bean>
	
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<!-- 실행할 뷰를찾는 역활 -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order" value="0"></beans:property>
	</beans:bean>	
	
	<!-- 이미지 다운받는부분. -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	  <beans:property name="defaultEncoding" value="UTF-8"></beans:property>
	  <beans:property name="maxInMemorySize" value="10000000"></beans:property>
	</beans:bean>


	<context:component-scan base-package="com.bit.web.play" />


	<beans:bean id="loginInter" class="com.bit.web.play.action.IntercepterPro" scope="singleton"></beans:bean>
	<interceptors>
	<interceptor>
	      <mapping path="/loginIntercepter"/>
	      <beans:ref bean="loginInter"/>

	   </interceptor>
	</interceptors>
</beans:beans>